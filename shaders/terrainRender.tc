#version 400 core

layout (vertices = 4) out;

in VS_OUT
{
    vec2 tc;
} tcs_in[];

out TCS_OUT
{
    vec2 tc;
} tcs_out[];

uniform mat4 projMatrix;
uniform mat4 mvMatrix;

void main(void)
{
    int invocationId = gl_InvocationID;
    if (invocationId == 0)
    {
        /*vec4 p0 = projMatrix * mvMatrix * gl_in[0].gl_Position;
        vec4 p1 = projMatrix * mvMatrix * gl_in[1].gl_Position;
        vec4 p2 = projMatrix * mvMatrix * gl_in[2].gl_Position;
        vec4 p3 = projMatrix * mvMatrix * gl_in[3].gl_Position;
        p0 /= p0.w;
        p1 /= p1.w;
        p2 /= p2.w;
        p3 /= p3.w;
        
        if (p0.z <= 0 || p1.z <= 0 || p2.z <= 0 || p3.z <= 0)
        {
            gl_TessLevelOuter[0] = 0.0;
            gl_TessLevelOuter[1] = 0.0;
            gl_TessLevelOuter[2] = 0.0;
            gl_TessLevelOuter[3] = 0.0;
        }
        else
        {
            // TODO how did we come to 16? How are we determining the choice of subtractions? How about the inner tesselation level?
            const float tesselationScale = 16;
            float l0 = length(p2.xy - p0.xy) * tesselationScale + 1.0;
            float l1 = length(p3.xy - p2.xy) * tesselationScale + 1.0;
            float l2 = length(p3.xy - p1.xy) * tesselationScale + 1.0;
            float l3 = length(p1.xy - p0.xy) * tesselationScale + 1.0;
            gl_TessLevelOuter[0] = l0;
            gl_TessLevelOuter[1] = l1;
            gl_TessLevelOuter[2] = l2;
            gl_TessLevelOuter[3] = l3;
            gl_TessLevelInner[0] = min(l1, l3);
            gl_TessLevelInner[1] = min(l0, l2);
        }*/
        
        gl_TessLevelOuter[0] = 1;
        gl_TessLevelOuter[1] = 1;
        gl_TessLevelOuter[2] = 1;
        gl_TessLevelOuter[3] = 1;
        gl_TessLevelInner[0] = 1;
        gl_TessLevelInner[1] = 1;
    }
    
    // Pass-through our position and texture coordinate
    gl_out[invocationId].gl_Position = gl_in[invocationId].gl_Position;
    tcs_out[invocationId].tc = tcs_in[invocationId].tc;
}

